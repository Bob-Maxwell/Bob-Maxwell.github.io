<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Learning Notes</title>
        <link>https://Bob-Maxwell.github.io/post/</link>
        <description>Recent content in Posts on Learning Notes</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Jinghan Cai</copyright>
        <lastBuildDate>Sun, 26 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://Bob-Maxwell.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Introduction to robotics</title>
        <link>https://Bob-Maxwell.github.io/p/introduction-to-robotics/</link>
        <pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Bob-Maxwell.github.io/p/introduction-to-robotics/</guid>
        <description>&lt;img src="https://Bob-Maxwell.github.io/p/introduction-to-robotics/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Introduction to robotics" /&gt;
&lt;h2 id=&#34;manipulator-kinematics&#34;&gt;Manipulator kinematics
&lt;/h2&gt;&lt;p&gt;The kinematic function of a link is to maintain a fixed relationship between the two joint axes. This relationship can be described with the link length $a$ and the twist $\alpha$. Moreover, the link offset $d$ and the joint angle $\theta$ are two parameters that may be used to describe the nature of the connection between neighboring links.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;two-joint-axes1.png&#34; width=&#34;48%&#34;&gt;
  &lt;img src=&#34;two-joint-axes2.png&#34; width=&#34;51%&#34;&gt;
&lt;/div&gt;
&lt;p&gt;In a word, if we abstract the two rotating pairs at the end of the connecting rod into two lines, then only four parameters are needed to characterize the transformation relationship between the two lines:&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;$a_{i-1}$ = the distance from $\hat{Z}_{i-1}$ to $\hat{Z}_i$ measured along $\hat{X}_i$;&lt;/p&gt;
&lt;p&gt;$\alpha_{i-1}$ = the angle from $\hat{Z}_{i-1}$ to $\hat{Z}_i$ measured about $\hat{X}_i$;&lt;/p&gt;
&lt;p&gt;$d_i$ = the distance from $\hat{X}_{i-1}$ to $\hat{X}_i$ measured along $\hat{Z}_i$;&lt;/p&gt;
&lt;p&gt;$\theta_i$ = the angle from $\hat{X}_{i-1}$ to $\hat{X}_i$ measured about $\hat{Z}_i$.&lt;/p&gt;
&lt;/center&gt;
&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;two-joint-axes3.png&#34; width=&#34;50%&#34;&gt;
  &lt;img src=&#34;two-joint-axes4.png&#34; width=&#34;49%&#34;&gt;
&lt;/div&gt;
&lt;!-- ![Link frames are attached so that frame {i} is attached to link i.](two-joint-axes3.png)![Location of intermediate frames {P}, {Q} and {R}.](two-joint-axes4.png) --&gt;
&lt;p&gt;By defining a frame for each link, we have broken the kinematics problem into $n$ subproblems. In order to solve each of these subproblems, namely $T_i^{i-1}$, we will further break each subproblem into four subsubproblems. Each of these four transformations will be a function of one link parameter only and will be simple enough that we can write down its form by inspection:&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    P^{i-1} &amp;= T_i^{i-1}~ P^i \\ 
    &amp;= T_R^{i-1}~ T_Q^R~ T_P^Q~ T_i^P~ P^i \\
    &amp;= R_X(\alpha_{i-1})~ D_X(a_{i-1})~ R_Z(\theta_i)~ D_Z(d_i)~ P^i \\
    &amp;= \text{Screw}_X(a_{i-1},\alpha_{i-1})~ \text{Screw}_Z(d_i,\theta_i)~ P^i \\
    &amp;=  \begin{bmatrix}
          1&amp;0&amp;0&amp;a_{i-1}\\
          0&amp;c\alpha_{i-1}&amp;-s\alpha_{i-1}&amp;0\\
          0&amp;s\alpha_{i-1}&amp;c\alpha_{i-1}&amp;0\\
          0&amp;0&amp;0&amp;1\\
        \end{bmatrix}
        \begin{bmatrix}
          c\theta_i&amp;-s\theta_i&amp;0&amp;0\\
          s\theta_i&amp;c\theta_i&amp;0&amp;0\\
          0&amp;0&amp;1&amp;d_i\\
          0&amp;0&amp;0&amp;1\\
        \end{bmatrix}
  \end{aligned}
\end{equation*}
$$&lt;h2 id=&#34;inverse-manipulator-kinematics&#34;&gt;Inverse Manipulator kinematics
&lt;/h2&gt;&lt;!-- In this chapter, we investigate the more difficult converse problem: Given the desired position and orientation of the tool relative to the station, how do we compute the set of joint angles which will achieve this desired result? --&gt;
&lt;h2 id=&#34;jacobians-velocities-and-static-forces&#34;&gt;Jacobians: velocities and static forces
&lt;/h2&gt;&lt;h3 id=&#34;velocity-of-rigid-bodies&#34;&gt;Velocity of rigid bodies
&lt;/h3&gt;&lt;p&gt;For linear velocity, assume {$A$} be the fixed frame, {$B$} be the frame attached to a rigid body, and we wish to describe the motion of $^BQ$ relative to frame {$A$}, then&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    ^AV_Q &amp;= \frac{^A\text{d}}{\text{d}t}(^AX_Q) = \frac{^A\text{d}}{\text{d}t}(^AX_B+^{B(A)}X_Q) \\
    &amp;= \frac{^A\text{d}}{\text{d}t}(^AX_B) + \frac{^B\text{d}}{\text{d}t}~ ^BX_Q R_B^A \\
    &amp;= ^AV_{BORG} + R_B^A~ ^BV_Q
  \end{aligned}
\end{equation*}
$$&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;linear.png&#34; width=&#34;47%&#34;&gt;
  &lt;img src=&#34;angular.png&#34; width=&#34;51%&#34;&gt;
&lt;/div&gt;
&lt;p&gt;For rotational velocity, let&amp;rsquo;s consider the vector $Q$ is constant as viewed from frame {$B$} first, then point $Q$ will have a velocity as seen from {$A$} due to the rotational velocity $^A\Omega_B$, i.e.&lt;/p&gt;
$$
  ^AV_Q = ^A\Omega_B \times ^AQ
$$&lt;p&gt;In the general case, the vector $Q$ could also be changing with respect to frame {$B$}, thus&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    ^AV_Q &amp;= ^A(^BV_Q) + ^A\Omega_B \times ^AQ \\
    &amp;= R_B^A~ ^BV_Q + ^A\Omega_B \times R_B^A~ ^BQ
  \end{aligned}
\end{equation*}
$$&lt;p&gt;Consider linear and rotational velocity simultaneously, we can easily get the derivative of a vector in a moving frame as seen from a stationary frame:&lt;/p&gt;
$$
  ^AV_Q = ^AV_{BORG} + R_B^A~ ^BV_Q + ^A\Omega_B \times R_B^A~ ^BQ
$$&lt;h3 id=&#34;link-to-link-velocity-propagation&#34;&gt;Link-to-link velocity propagation
&lt;/h3&gt;&lt;p&gt;The angular velocity of link $i+1$ is the same as that of link $i$ plus a new component caused by rotational velocity at joint $i+1$. This can be written in terms of frame {$i$} as&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    ^i\omega_{i+1} &amp;= ^i\omega_i + R_{i+1}^i \dot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1} \\
    &amp;= ^i\omega_i + R_{i+1}^i~ ^{i+1}
    \begin{bmatrix}
      0\\
      0\\
      \dot{\theta}_{i+1}\\
    \end{bmatrix}
  \end{aligned}
\end{equation*}
$$&lt;p&gt;By premultiplying both sides by $R_i^{i+1}$, we can find the description of the angular velocity of link $i+1$ with respect to frame {$i+1$}:&lt;/p&gt;
$$
  ^{i+1}\omega_{i+1} = R_i^{i+1}~ ^i\omega_{i+1} = R_i^{i+1}~ ^i\omega_i + \dot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1}
$$&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;velocity1.png&#34; width=&#34;49%&#34;&gt;
  &lt;img src=&#34;velocity2.png&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;p&gt;The linear velocity of the origin of frame {$i+1$} is the same as that of the origin of frame {$i$} plus a new component caused by rotational velocity of link $i$, so we have&lt;/p&gt;
$$
  ^iv_{i+1} = ^iv_i + ^i\omega_i \times ^iP_{i+1}
$$&lt;p&gt;Premultiplying both sides by $R_i^{i+1}$, we compute&lt;/p&gt;
$$
  ^{i+1}v_{i+1} = R_i^{i+1}~ ^iv_{i+1} = R_i^{i+1} (^iv_i + ^i\omega_i \times ^iP_{i+1})
$$&lt;p&gt;The corresponding relationships for the case that joint $i+1$ is prismatic are&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    ^{i+1}\omega_{i+1} &amp;= R_i^{i+1}~ ^i\omega_i \\
    ^{i+1}v_{i+1} &amp;= R_i^{i+1} (^iv_i + ^i\omega_i \times ^iP_{i+1}) + \dot{d}_{i+1} ^{i+1}\hat{Z}_{i+1}
  \end{aligned}
\end{equation*}
$$&lt;h3 id=&#34;jacobians-and-changing-a-jacobians-frame-of-reference&#34;&gt;Jacobians and changing a Jacobian&amp;rsquo;s frame of reference
&lt;/h3&gt;&lt;p&gt;In the field of robotics, we generally use Jacobians that relate joint velocities to Cartesian velocities of the tip of the arm, for example&lt;/p&gt;
$$
  ^0\nu = \begin{bmatrix}
    ^0v\\
    ^0\omega\\
  \end{bmatrix} = ^0J(\Theta)\dot{\Theta}
$$&lt;p&gt;where $\Theta$ is the vector of joint angles of the manipulator and $\nu$ is a vector of Cartesian velocities.&lt;/p&gt;
&lt;p&gt;Given a Jacobian written in frame {$B$}, we might be interested in giving an expression ofr the Jacobian in another frame {$A$}, that is&lt;/p&gt;
$$
  ^AJ(\Theta)\dot{\Theta} = \begin{bmatrix}
      ^Av\\
      ^A\omega\\
    \end{bmatrix}
  = \begin{bmatrix}
    R_B^A &amp; 0\\
    0 &amp; R_B^A\\
  \end{bmatrix}
  \begin{bmatrix}
    ^Bv\\
    ^B\omega\\
  \end{bmatrix}
  = \begin{bmatrix}
    R_B^A &amp; 0\\
    0 &amp; R_B^A\\
  \end{bmatrix}~ ^BJ(\Theta)\dot{\Theta}
$$&lt;h3 id=&#34;static-forces-in-manipulators-and-jacobians-in-the-force-domain&#34;&gt;Static forces in manipulators and Jacobians in the force domain
&lt;/h3&gt;&lt;p&gt;We will use our usual convention for assigning frames to links. Figure below shows the static forces and moments (excluding the gravity force) acting on link $i$. Summing the forces and setting them equal to zero, we have&lt;/p&gt;
$$
  ^if_i - ^if_{i+1} = 0
$$&lt;p&gt;Summing torques about the origin of frame {$i$}, we have&lt;/p&gt;
$$
  ^in_i - ^in_{i+1} - ^iP_{i+1}\times ^if_{i+1} = 0
$$&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;static force-moment balance.png&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;p&gt;To find the joint torque required to maintain the static equilibrium, the dot product of the joint-axis vector with the moment vector acting on the link is computed:&lt;/p&gt;
$$
  \tau_i = ^in_i^T~ ^i\hat{Z}_i
$$&lt;p&gt;In case that joint $i$ is prismatic, we compute the joint actuator force as&lt;/p&gt;
$$
  \tau_i = ^if_i^T~ ^i\hat{Z}_i
$$&lt;p&gt;The principle of virtual work allows us to make certain statements about the static case by allowing the amount of this displacement to go to an infinitesimal, that is&lt;/p&gt;
$$
  \tau\cdot\delta\Theta = \mathcal{F}\cdot\delta\chi
$$&lt;p&gt;where $\mathcal{F}$ is a 6$\times$1 Cartesian force-moment vector acting at the end-effector, $\delta\chi$ is a 6$\times$1 infinitesimal Cartesian displacement of the end- effector, $\tau$ is a 6$\times$1 vector of torques at the joints, and $\delta\Theta$ is a 6$\times$1 vector of infinitesimal joint displacements. Based on the definition of the Jacobian, we have&lt;/p&gt;
$$
  \tau^T\cdot\delta\Theta = \mathcal{F}^T\cdot\delta\chi = \mathcal{F}^T\cdot J\delta\Theta
$$&lt;h3 id=&#34;cartesian-transformation-of-velocities-and-static-forces&#34;&gt;Cartesian transformation of velocities and static forces
&lt;/h3&gt;&lt;p&gt;Assume the two frames here are rigidly connected, then we have the velocity transformation:&lt;/p&gt;
$$
  \begin{bmatrix}
    ^Bv_B\\
    ^B\omega_B\\
  \end{bmatrix} = \begin{bmatrix}
    R_A^B &amp; -R_A^B~ ^AP_{BORG}\times\\
    0 &amp; R_A^B\\
  \end{bmatrix}\begin{bmatrix}
    ^Av_A\\
    ^A\omega_A\\
  \end{bmatrix}
$$&lt;p&gt;we can invert this equation:&lt;/p&gt;
$$
  \begin{bmatrix}
    ^Av_A\\
    ^A\omega_A\\
  \end{bmatrix} = \begin{bmatrix}
    R_B^A &amp; ^AP_{BORG}\times R_B^A\\
    0 &amp; R_B^A\\
  \end{bmatrix}\begin{bmatrix}
    ^Bv_B\\
    ^B\omega_B\\
  \end{bmatrix}
$$&lt;p&gt;Similarly, we can write the force-moment transformation:&lt;/p&gt;
$$
  \begin{bmatrix}
    ^AF_A\\
    ^AN_A\\
  \end{bmatrix} = \begin{bmatrix}
    R_B^A &amp; 0\\
    ^AP_{BORG}\times R_B^A &amp; R_B^A\\
  \end{bmatrix}\begin{bmatrix}
    ^BF_B\\
    ^BN_B\\
  \end{bmatrix}
$$&lt;h2 id=&#34;manipulator-dynamics&#34;&gt;Manipulator dynamics
&lt;/h2&gt;&lt;h3 id=&#34;acceleration-of-a-rigid-body&#34;&gt;Acceleration of a rigid body
&lt;/h3&gt;&lt;p&gt;The following equation describes the velocity of a vector $^BQ$ as seen from frame {$A$} when the origins are coincident:&lt;/p&gt;
$$
  \dot{R}_B^A~ ^BQ + R_B^A~ ^BV_Q = \frac{\text{d}}{\text{d}t}(R_B^A~ ^BQ) = ^AV_Q = R_B^A~ ^BV_Q + ^A\Omega_B\times R_B^A~ ^BQ
$$&lt;p&gt;Differentiat it, we get&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    ^A\dot{V}_Q &amp;= \frac{\text{d}}{\text{d}t}(R_B^A~ ^BV_Q) + ^A\dot{\Omega}_B\times R_B^A~ ^BQ + ^A\Omega_B\times \frac{\text{d}}{\text{d}t}(R_B^A~ ^BQ) \\
    &amp;= (R_B^A~ ^B\dot{V}_Q + \dot{R}_B^A~ ^BV_Q) + ^A\dot{\Omega}_B\times R_B^A~ ^BQ + ^A\Omega_B\times (R_B^A~ ^BV_Q + ^A\Omega_B\times R_B^A~ ^BQ) \\
    &amp;= (R_B^A~ ^B\dot{V}_Q + ^A\Omega_B\times R_B^A~ ^BV_Q) + ^A\dot{\Omega}_B\times R_B^A~ ^BQ + ^A\Omega_B\times (R_B^A~ ^BV_Q + ^A\Omega_B\times R_B^A~ ^BQ) \\
    &amp;= R_B^A~ ^B\dot{V}_Q + 2 ^A\Omega_B\times R_B^A~ ^BV_Q + ^A\dot{\Omega}_B\times R_B^A~ ^BQ + ^A\Omega_B\times (^A\Omega_B\times R_B^A~ ^BQ)
  \end{aligned}
\end{equation*}
$$&lt;p&gt;Finally, to generalize to the case in which the origins are not coincident, we add one term which gives the linear acceleration of the origin of {$B$}:&lt;/p&gt;
$$
  ^A\dot{V}_{BORG} + R_B^A~ ^B\dot{V}_Q + 2 ^A\Omega_B\times R_B^A~ ^BV_Q + ^A\dot{\Omega}_B\times R_B^A~ ^BQ + ^A\Omega_B\times (^A\Omega_B\times R_B^A~ ^BQ)
$$&lt;p&gt;A particular case that is worth pointing out is when $^BQ$ is constant, or $^BV_Q = ^B\dot{V}_Q = 0$. In this case, the equation simplifies to&lt;/p&gt;
$$
  ^A\dot{V}_Q = ^A\dot{V}_{BORG} + ^A\dot{\Omega}_B\times R_B^A~ ^BQ + ^A\Omega_B\times (^A\Omega_B\times R_B^A~ ^BQ)
$$&lt;p&gt;Consider the case in which {$B$} is rotating relative to {$A$} with $^A\Omega_B$ and {$C$} is rotating relative to {$B$} with $^B\Omega_C$, then&lt;/p&gt;
$$
  ^A\Omega_C = ^A\Omega_B + R_B^A~ ^B\Omega_C
$$&lt;p&gt;By differentiating, we obtain&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    ^A\dot{\Omega}_C &amp;= ^A\dot{\Omega}_B + \frac{\text{d}}{\text{d}t}(R_B^A~ ^B\Omega_C) \\
    &amp;= ^A\dot{\Omega}_B + ^A\Omega_B\times R_B^A~ ^B\Omega_C + R_B^A~ ^B\dot{\Omega}_C
  \end{aligned}
\end{equation*}
$$&lt;h3 id=&#34;newtons-and-eulers-equation&#34;&gt;Newton&amp;rsquo;s and Euler&amp;rsquo;s equation
&lt;/h3&gt;&lt;p&gt;The figure below shows a rigid body rotating with angular velocity $\omega$ and with angular acceleration $\dot{\omega}$. In such a situation, the moment $N$, which must be acting on the body to cause this motion, is given by Euler&amp;rsquo;s equation:&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    N &amp;= \dot{I}\cdot\omega + I\cdot\dot{\omega} \\
    &amp;= \frac{\text{d}}{\text{d}t}\big(\sum_i\sum_j I_{ij}e_ie_j\big)\cdot\omega + I\cdot\dot{\omega} \\
    &amp;= \sum_i\sum_j I_{ij}(\dot{e}_ie_j + e_i\dot{e}_j)\cdot\omega + I\cdot\dot{\omega} \\
    &amp;= \sum_i\sum_j I_{ij}\big((\omega\times e_i)e_j - e_i(e_j\times\omega) \big)\cdot\omega + I\cdot\dot{\omega} \\
    &amp;= (\omega\times I)\cdot\omega - (I\times\omega)\cdot\omega + I\cdot\dot{\omega} \\
    &amp;= (\omega\times I)\cdot\omega + I\cdot\dot{\omega}
  \end{aligned}
\end{equation*}
$$&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;Euler&#39;s equation.png&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;h3 id=&#34;iterative-newton-euler-dynamic-formulation&#34;&gt;Iterative Newton-Euler dynamic formulation
&lt;/h3&gt;&lt;p&gt;We now consider the problem of computing the torques that correspond to a given trajectory of a manipulator. We assume we know the position, velocity, and acceleration of the joints, $(\Theta,\dot{\Theta}, \ddot{\Theta})$. With this knowledge, and with knowledge of the kinematics and the mass-distribution information of a robot, we can calculate the joint torques required to cause this motion.&lt;/p&gt;
&lt;h4 id=&#34;outward-iterations-to-compute-velocities-and-accelerations&#34;&gt;Outward iterations to compute velocities and accelerations
&lt;/h4&gt;&lt;p&gt;The &amp;ldquo;propagation&amp;rdquo; of rotational velocity from link to link is given by&lt;/p&gt;
$$
  ^i\omega_{i+1} = ^i\omega_i + R_{i+1}^i\dot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1}
$$&lt;p&gt;By differentiating, we obtain&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    ^i\dot{\omega}_{i+1} &amp;= ^i\dot{\omega}_i + \dot{R}_{i+1}^i\dot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1} + R_{i+1}^i\ddot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1} \\
    &amp;= ^i\dot{\omega}_i + ^i\Omega_{i+1}\times R_{i+1}^i\dot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1} + R_{i+1}^i\ddot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1} \\
    &amp;= ^i\dot{\omega}_i + ^i\omega_i\times\dot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1} + R_{i+1}^i\ddot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1}
  \end{aligned}
\end{equation*}
$$&lt;p&gt;By premultiplying both sides by $R_i^{i+1}$, we obtain the equation for transforming angular acceleration from one link to the next:&lt;/p&gt;
$$
  ^{i+1}\dot{\omega}_{i+1} = R_i^{i+1}~ ^i\dot{\omega}_i + R_i^{i+1}~ ^i\omega_i\times\dot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1} + \ddot{\theta}_{i+1}~ ^{i+1}\hat{Z}_{i+1}
$$&lt;p&gt;When joint $i+1$ is prismatic, this simplifies to&lt;/p&gt;
$$
  ^{i+1}\dot{\omega}_{i+1} = R_i^{i+1}~ ^i\dot{\omega}_i
$$&lt;p&gt;The linear acceleration of each link-frame origin is obtained by&lt;/p&gt;
$$
  ^{i+1}\dot{v}_{i+1} = R_i^{i+1}\big(^i\dot{v}_i + ^i\dot{\omega}_i\times ^iP_{i+1} + ^i\omega_i\times (^i\omega_i\times ^iP_{i+1})\big)
$$&lt;p&gt;For prismatic joint $i+1$, we have&lt;/p&gt;
$$
  ^{i+1}\dot{v}_{i+1} = R_i^{i+1}\big(^i\dot{v}_i + ^i\dot{\omega}_i\times ^iP_{i+1} + ^i\omega_i\times (^i\omega_i\times ^iP_{i+1})\big) + 2~ ^{i+1}\omega_{i+1}\times\dot{d}_{i+1}~ ^{i+1}\hat{Z}_{i+1} + \ddot{d}_{i+1}~ ^{i+1}\hat{Z}_{i+1}
$$&lt;p&gt;We also will need the linear acceleration of the center of mass of each link, which also can be found by&lt;/p&gt;
$$
  ^i\dot{v}_{C_i} = ^i\dot{\omega}_i\times ^iP_{C_i} + ^i\omega_i\times(^i\omega_i + ^iP_{C_i}) + ^i\dot{v}_i
$$&lt;p&gt;Here, we imagine a frame {$C_i$} attached to each link, having its origin located at the center of mass of the link and having the same orientation as the link frame {$i$}. The equation above doesn&amp;rsquo;t involve joint motion at all and so is valid for joint $i+1$, regardless of whether it&amp;rsquo;s revolute or prismatic.&lt;/p&gt;
&lt;h4 id=&#34;the-force-and-torque-acting-on-a-link&#34;&gt;The force and torque acting on a link
&lt;/h4&gt;&lt;p&gt;Having computed the linear and angular accelerations of the mass center of each link, we can apply the Newton-Euler equations to compute the inertial force and torque acting at the center of mass of each link. Thus we have&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    F_i &amp;= m\dot{v}_{C_i} \\
    N_i &amp;= ^{C_i}I\dot{\omega}_i + \omega_i\times ^{C_i}I\omega_i
  \end{aligned}
\end{equation*}
$$&lt;h4 id=&#34;inward-iterations-to-compute-forces-and-torques&#34;&gt;Inward iterations to compute forces and torques
&lt;/h4&gt;&lt;p&gt;Having computed the forces and torques acting on each link, we now need to calculate the joint torques that will result in these net forces and torques being applied to each link.&lt;/p&gt;
&lt;p&gt;By summing the forces acting on link $i$, we arrive at the force-balance relationship:&lt;/p&gt;
$$
  ^iF_i = ^if_i - R_{i+1}^i~ ^{i+1}f_{i+1}
$$&lt;p&gt;By summing torques about the center of mass and setting them equal to zero, we arrive at the torque-balance equation:&lt;/p&gt;
$$
  ^iN_i = ^in_i - ^in_{i+1} + (-^iP_{C_i})\times ^if_i - (^iP_{i+1}-^iP_{C_i})\times ^if_{i+1}
$$&lt;p&gt;Finally, we can rearrange the force and torque equations so that they appear as iterative relationships from higher numbered neighbor to lower numbered neighbor:&lt;/p&gt;
$$
\begin{equation*}
  \begin{aligned}
    ^if_i &amp;= R_{i+1}^i~ ^{i+1}f_{i+1} + ^iF_i \\
    ^in_i &amp;= ^iN_i + R_{i+1}^i~ ^{i+1}n_{i+1} + ^iP_{C_i}\times ^iF_i + ^iP_{i+1}\times R_{i+1}^i~ ^{i+1}f_{i+1}
  \end{aligned}
\end{equation*}
$$&lt;p&gt;These equations are evaluated link by link, starting from link $n$ and working inward toward the base of the robot. These inward force iterations are analogous to the static force iterations introduced in Section 3.&lt;/p&gt;
&lt;p&gt;As in the static case, the required joint torques are found by taking the $\hat{Z}$ component of the torque applied by one link on its neighbor:&lt;/p&gt;
$$
  \tau_i = ^in_i^T~ ^i\hat{Z}_i
$$&lt;p&gt;For joint $i$ prismatic, we use&lt;/p&gt;
$$
  \tau_i = ^if_i^T~ ^i\hat{Z}_i
$$&lt;p&gt;where we have used the symbol $\tau$ for a linear actuator force.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;balance.png&#34; width=&#34;50%&#34;&gt;
&lt;/div&gt;
&lt;h3 id=&#34;lagrangian-formulation-of-manipulator-dynamics&#34;&gt;Lagrangian formulation of manipulator dynamics
&lt;/h3&gt;&lt;p&gt;Whereas the Newton-Euler formulation might be said to be a &amp;ldquo;force balance&amp;rdquo; approach to dynamics, the Lagrangian formulation is an &amp;ldquo;energy-based&amp;rdquo; approach to dynamics.&lt;/p&gt;
&lt;p&gt;We start by developing an expression for the kinetic energy of a manipulator:&lt;/p&gt;
$$
  k = \sum_{i=1}^n \frac{1}{2}m_i v_{C_i}^T v_{C_i} + \frac{1}{2}^i\omega_i^T~ ^{C_i}I_i~ ^i\omega_i = \frac{1}{2}\dot{\Theta}^T M(\Theta)\dot{\Theta}
$$&lt;p&gt;The total potential energy stored in the manipulator can be expressed as&lt;/p&gt;
$$
  u = \sum_i^n -m_i~ ^0g^T~ ^0P_{C_i}
$$&lt;p&gt;In our notation, the Lagrangian of a manipulator is&lt;/p&gt;
$$
  \mathcal{L}(\Theta, \dot{\Theta}) = k(\Theta, \dot{\Theta}) - u(\Theta)
$$&lt;p&gt;The equations of motion for the manipulator are then given by&lt;/p&gt;
$$
  \frac{\text{d}}{\text{d}t}\frac{\partial\mathcal{L}}{\partial\dot{\Theta}} - \frac{\partial\mathcal{L}}{\partial\Theta} = \tau
$$&lt;p&gt;where $\tau$ is the $n\times$ 1 vector of actuator torques. In case of a manipulator, this equation becomes&lt;/p&gt;
$$
  \frac{\text{d}}{\text{d}t}\frac{\partial k}{\partial\dot{\Theta}} - \frac{\partial k}{\partial\Theta} + \frac{\partial u}{\partial\Theta} = \tau
$$&lt;h2 id=&#34;trajectory-generation&#34;&gt;Trajectory generation
&lt;/h2&gt;&lt;h2 id=&#34;linear-control-of-manipulators&#34;&gt;Linear control of manipulators
&lt;/h2&gt;&lt;p&gt;Armed with the previous material, we now have the means to calculate joint-position time histories that correspond to desired end-effector motions through space. We wish to cause the manipulator joints to follow prescribed position trajectories, but the actuators are commanded in terms of torque, so we must use some kind of control system to compute appropriate actuator commands that will realize this desired motion. Almost always, these torques are determined by using feedback from the joint sensors to compute the torque required.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;robot control system.png&#34; width=&#34;70%&#34;&gt;
&lt;/div&gt;
&lt;h3 id=&#34;control-of-second-order-systems&#34;&gt;Control of second-order systems
&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s assume that we have sensors capable of detecting the block&amp;rsquo;s position and velocity. We now propose a control law which computes the force that should be applied by the actuator as a function of the sensed feedback:&lt;/p&gt;
$$
  f = -k_px - k_v\dot{x}
$$&lt;p&gt;By equating the open-loop dynamics equation with the control law, we can derive the closed-loop dynamics as&lt;/p&gt;
$$
  m\ddot{x} + (b+k_v)\dot{x} + (k+k_p)x = 0
$$&lt;p&gt;It&amp;rsquo;s clear that by setting the control gains $k_v$ and $k_v$, we can cause the closed-loop system to appear to have any second system behabior that we wish.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;closed-loop control.png&#34; width=&#34;60%&#34;&gt;
&lt;/div&gt;
&lt;h3 id=&#34;control-law-partitioning&#34;&gt;Control-law partitioning
&lt;/h3&gt;&lt;p&gt;In preparation for designing control laws for more complicated systems, let&amp;rsquo;s partition the controller into a model-based portion and a servo portion. In this method, $\alpha$ and $\beta$ are chosen so that the system appears to be a unit mass:&lt;/p&gt;
$$
  m\ddot{x} + b\dot{x} + kx = \alpha f&#39; + \beta = m(-k_v\dot{x}-k_px) + (b\dot{x} + kx)
$$&lt;p&gt;Under this methodology, the setting of the control gains $k_v$ and $k_p$ is simple and is independent of the system parameters $b$ and $k$.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;partitioned control method.png&#34; width=&#34;70%&#34;&gt;
&lt;/div&gt;
&lt;h3 id=&#34;trajectory-following-control&#34;&gt;Trajectory-following control
&lt;/h3&gt;&lt;p&gt;Rather than just maintaining the block at a desired location, let us enhance our controller so that the block can be made to follow a trajectory. The trajectory is given by a function of time, $x_d(t)$, that specifies the desired position of the block. We define the servo error between the desired and actual trajectory as $e = x_d - x$. A servo-control law that will cause trajectory following is&lt;/p&gt;
$$
  m\ddot{x} + b\dot{x} + kx = \alpha f&#39; + \beta = m(\ddot{x}_d + k_v\dot{e} + k_pe) + (b\dot{x} + kx)
$$&lt;p&gt;which leads to&lt;/p&gt;
$$
  \ddot{e} + k_v\dot{e} + k_pe = 0
$$&lt;p&gt;This is a second-order differential equation for which we can choose the coefficients so we can design any response we wish.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;trajectory-following controller.png&#34; width=&#34;75%&#34;&gt;
&lt;/div&gt;
&lt;h3 id=&#34;disturbance-rejection&#34;&gt;Disturbance rejection
&lt;/h3&gt;&lt;p&gt;One of the purposes of a control system is to provide disturbance rejection, that is, to maintain good performance, or minimize errors even in the presence of some external disturbances or noise. An analysis of our closed-loop system leads to the error equation&lt;/p&gt;
$$
  \ddot{e} + k_v\dot{e} + k_pe = f_{\text{dist}}/m
$$&lt;p&gt;If it is known that $f_{\text{dist}}$ is bounded, that is, a constant $a$ exists such that $\max\limits_t f_{\text{dist}}(t)&amp;lt;a$, then the solution of the differential equation $e(t)$ is also bounded. This result is due to a property of stable linear systems known as bounded-input, bounded-output or BIBO stability.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;trajectory-following control with disturbance.png&#34; width=&#34;75%&#34;&gt;
&lt;/div&gt;
&lt;p&gt;When $f_{\text{dist}}$ is a constant, the steady-state equation is $k_p e = f_{\text{dist}}/m$. It is clear that the higher the position gain $k_p$, the smaller will be the steady-state error $e$.&lt;/p&gt;
&lt;p&gt;In order to eliminate steady-state error, a modified control law is sometimes used. The modification involves the addition of an integral term to the control law. The control law becomes&lt;/p&gt;
$$
  m\ddot{x} + b\dot{x} + kx = \alpha f&#39; + \beta + f_{\text{dist}} = m\big(\ddot{x}_d + k_v\dot{e} + k_pe + k_i\int e\text{d}t\big) + (b\dot{x} + kx) + f_{\text{dist}}
$$&lt;p&gt;which equals to&lt;/p&gt;
$$
  \dot{}\ddot{e} + k_v\ddot{e} + k_p\dot{e} + k_ie = \dot{f}_{\text{dist}}/m
$$&lt;p&gt;then in the steady state, $k_i e = 0$.&lt;/p&gt;
&lt;h2 id=&#34;nonlinear-control-of-manipulators&#34;&gt;Nonlinear control of manipulators
&lt;/h2&gt;&lt;p&gt;In the previous section, we made several approximations to allow a linear analysis of the manipulator-control problem. Most important among these approximations was that each joint could be considered independent and that the inertia &amp;ldquo;seen&amp;rdquo; by each joint actuator was constant. The linear controllers results in nonuniform damping throughout the workspace and other undesirable effects.&lt;/p&gt;
&lt;h3 id=&#34;the-control-problem-for-manipulators&#34;&gt;The control problem for manipulators
&lt;/h3&gt;$$
\begin{equation*}
  \begin{aligned}
    &amp;M(\Theta)\ddot{\Theta} + V(\Theta,\dot{\Theta}) + G(\Theta) + F(\Theta,\dot{\Theta}) = \tau = \alpha\tau&#39; + \beta \\
    = &amp;M(\Theta)(\ddot{\Theta}_d + K_v\dot{E} + K_pE) + V(\Theta,\dot{\Theta}) + G(\Theta) + F(\Theta,\dot{\Theta})
  \end{aligned}
\end{equation*}
$$&lt;p&gt;which equals to&lt;/p&gt;
$$
  \ddot{E} + K_v\dot{E} + K_p E = 0
$$&lt;p&gt;If this vector equation is decoupled, i.e. the matrices $K_v$ and $K_p$ are diagonal, then the equation above could just as well be written on a joint-by-joint basis as&lt;/p&gt;
$$
  \ddot{e}_i + k_{vi}\dot{e} + k_{pi} e = 0
$$&lt;div align=&#34;center&#34;&gt;
  &lt;img src=&#34;model-based manipultor-control.png&#34; width=&#34;80%&#34;&gt;
&lt;/div&gt;
&lt;h2 id=&#34;force-control-of-manipulators&#34;&gt;Force control of manipulators
&lt;/h2&gt;</description>
        </item>
        
    </channel>
</rss>
